definitions:
  models.ApiResponse:
    properties:
      data: {}
      id: {}
      message:
        type: string
      pagination: {}
      success:
        type: boolean
    type: object
  models.AuthResponse:
    properties:
      success:
        type: boolean
      token:
        type: string
    type: object
  models.AuthResponseFailed:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.BulkInsertResponse:
    properties:
      created:
        items:
          type: string
        type: array
      payloadDuplicate:
        items:
          type: string
        type: array
      success:
        type: boolean
      updateFailed:
        items:
          type: string
        type: array
      updated:
        items:
          type: string
        type: array
    type: object
  models.Category:
    properties:
      categoryguid:
        type: string
      image:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      order:
        type: integer
      parentguid:
        type: string
    type: object
  models.CategoryActivity:
    properties:
      categoryguid:
        type: string
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      image:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      order:
        type: integer
      parentguid:
        type: string
      shopid:
        type: string
      updatedat:
        type: string
    type: object
  models.CategoryBulkReponse:
    properties:
      created:
        items:
          type: string
        type: array
      payloadDuplicate:
        items:
          type: string
        type: array
      success:
        type: boolean
      updateFailed:
        items:
          type: string
        type: array
      updated:
        items:
          type: string
        type: array
    type: object
  models.CategoryDeleteActivity:
    properties:
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      shopid:
        type: string
      updatedat:
        type: string
    type: object
  models.CategoryFetchUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/models.CategoryLastActivityResponse'
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.CategoryImport:
    properties:
      categoryguid:
        type: string
      code:
        type: string
      image:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      order:
        type: integer
      parentguid:
        type: string
    type: object
  models.CategoryImportInfo:
    properties:
      categoryguid:
        type: string
      code:
        type: string
      guidfixed:
        type: string
      image:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      order:
        type: integer
      parentguid:
        type: string
    type: object
  models.CategoryImportPageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.CategoryImportInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.CategoryInfo:
    properties:
      categoryguid:
        type: string
      guidfixed:
        type: string
      image:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      order:
        type: integer
      parentguid:
        type: string
    type: object
  models.CategoryInfoResponse:
    properties:
      data:
        $ref: '#/definitions/models.CategoryInfo'
      success:
        type: boolean
    type: object
  models.CategoryLastActivityResponse:
    properties:
      new:
        items:
          $ref: '#/definitions/models.CategoryActivity'
        type: array
      remove:
        items:
          $ref: '#/definitions/models.CategoryDeleteActivity'
        type: array
    type: object
  models.CategoryPageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.CategoryInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.Choice:
    properties:
      barcode:
        type: string
      default:
        type: boolean
      itemunit:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      price:
        type: number
      qty:
        type: number
      qtymax:
        type: number
      selected:
        type: boolean
      suggestcode:
        type: string
    type: object
  models.CreditCardPayment:
    properties:
      amount:
        type: number
      approvedcode:
        type: string
      cardnumber:
        type: string
      cardtype:
        type: string
      remark:
        type: string
    type: object
  models.Employee:
    properties:
      name:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  models.EmployeeInfo:
    properties:
      guidfixed:
        type: string
      name:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  models.EmployeePageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.EmployeeInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.EmployeeRequestLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.EmployeeRequestPassword:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.EmployeeRequestUpdate:
    properties:
      name:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  models.Image:
    properties:
      uri:
        type: string
    type: object
  models.Inventory:
    properties:
      activated:
        description: เปิดใช้งานอยู่
        type: boolean
      barcode:
        type: string
      category:
        $ref: '#/definitions/models.Category'
      categoryguid:
        description: Guid กลุ่มสินค้า
        type: string
      description1:
        description: รายละเอียดภาษาไทย
        type: string
      description2:
        type: string
      description3:
        type: string
      description4:
        type: string
      description5:
        type: string
      images:
        items:
          $ref: '#/definitions/models.InventoryImage'
        type: array
      itemcode:
        type: string
      itemguid:
        type: string
      itemsku:
        type: string
      itemunitcode:
        type: string
      itemunitdiv:
        type: number
      itemunitstd:
        type: number
      memberprice:
        type: number
      name1:
        description: ชื่อภาษาไทย
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      parid:
        type: string
      price:
        description: ราคาพื้นฐาน (กรณีไม่มีตารางราคา และโปรโมชั่น)
        type: number
      recommended:
        description: สินค้าแนะนำ
        type: boolean
      tags:
        items:
          $ref: '#/definitions/models.InventoryTag'
        type: array
      unitname1:
        type: string
      unitname2:
        type: string
      unitname3:
        type: string
      unitname4:
        type: string
      unitname5:
        type: string
    type: object
  models.InventoryActivity:
    properties:
      activated:
        description: เปิดใช้งานอยู่
        type: boolean
      barcode:
        type: string
      category:
        $ref: '#/definitions/models.Category'
      categoryguid:
        description: Guid กลุ่มสินค้า
        type: string
      createdat:
        type: string
      deletedat:
        type: string
      description1:
        description: รายละเอียดภาษาไทย
        type: string
      description2:
        type: string
      description3:
        type: string
      description4:
        type: string
      description5:
        type: string
      guidfixed:
        type: string
      images:
        items:
          $ref: '#/definitions/models.InventoryImage'
        type: array
      itemcode:
        type: string
      itemguid:
        type: string
      itemsku:
        type: string
      itemunitcode:
        type: string
      itemunitdiv:
        type: number
      itemunitstd:
        type: number
      memberprice:
        type: number
      name1:
        description: ชื่อภาษาไทย
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      parid:
        type: string
      price:
        description: ราคาพื้นฐาน (กรณีไม่มีตารางราคา และโปรโมชั่น)
        type: number
      recommended:
        description: สินค้าแนะนำ
        type: boolean
      shopid:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.InventoryTag'
        type: array
      unitname1:
        type: string
      unitname2:
        type: string
      unitname3:
        type: string
      unitname4:
        type: string
      unitname5:
        type: string
      updatedat:
        type: string
    type: object
  models.InventoryBulkInsertResponse:
    properties:
      created:
        items:
          type: string
        type: array
      payloadDuplicate:
        items:
          type: string
        type: array
      success:
        type: boolean
      updateFailed:
        items:
          type: string
        type: array
      updated:
        items:
          type: string
        type: array
    type: object
  models.InventoryDeleteActivity:
    properties:
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      shopid:
        type: string
      updatedat:
        type: string
    type: object
  models.InventoryFetchUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/models.InventoryLastActivityResponse'
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.InventoryImage:
    properties:
      uri:
        type: string
    type: object
  models.InventoryInfo:
    properties:
      activated:
        description: เปิดใช้งานอยู่
        type: boolean
      barcode:
        type: string
      category:
        $ref: '#/definitions/models.Category'
      categoryguid:
        description: Guid กลุ่มสินค้า
        type: string
      description1:
        description: รายละเอียดภาษาไทย
        type: string
      description2:
        type: string
      description3:
        type: string
      description4:
        type: string
      description5:
        type: string
      guidfixed:
        type: string
      images:
        items:
          $ref: '#/definitions/models.InventoryImage'
        type: array
      itemcode:
        type: string
      itemguid:
        type: string
      itemsku:
        type: string
      itemunitcode:
        type: string
      itemunitdiv:
        type: number
      itemunitstd:
        type: number
      memberprice:
        type: number
      name1:
        description: ชื่อภาษาไทย
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      parid:
        type: string
      price:
        description: ราคาพื้นฐาน (กรณีไม่มีตารางราคา และโปรโมชั่น)
        type: number
      recommended:
        description: สินค้าแนะนำ
        type: boolean
      tags:
        items:
          $ref: '#/definitions/models.InventoryTag'
        type: array
      unitname1:
        type: string
      unitname2:
        type: string
      unitname3:
        type: string
      unitname4:
        type: string
      unitname5:
        type: string
    type: object
  models.InventoryInfoResponse:
    properties:
      data:
        $ref: '#/definitions/models.InventoryInfo'
      success:
        type: boolean
    type: object
  models.InventoryLastActivityResponse:
    properties:
      new:
        items:
          $ref: '#/definitions/models.InventoryActivity'
        type: array
      remove:
        items:
          $ref: '#/definitions/models.InventoryDeleteActivity'
        type: array
    type: object
  models.InventoryOptionGroup:
    properties:
      details:
        items:
          $ref: '#/definitions/models.InventoryOptonGroupDetail'
        type: array
      guidfixed:
        type: string
      id:
        type: string
      optionname1:
        type: string
      productselectoption1:
        type: boolean
      productselectoption2:
        type: boolean
      productselectoptionmax:
        type: integer
      productselectoptionmin:
        type: integer
      shopid:
        type: string
    type: object
  models.InventoryOptionMain:
    properties:
      choices:
        items:
          $ref: '#/definitions/models.Choice'
        type: array
      choicetype:
        type: integer
      code:
        type: string
      maxselect:
        type: integer
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      order:
        type: integer
      required:
        type: boolean
    type: object
  models.InventoryOptionMainImport:
    properties:
      choices:
        items:
          $ref: '#/definitions/models.Choice'
        type: array
      choicetype:
        type: integer
      code:
        type: string
      maxselect:
        type: integer
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      order:
        type: integer
      required:
        type: boolean
    type: object
  models.InventoryOptionMainInfo:
    properties:
      choices:
        items:
          $ref: '#/definitions/models.Choice'
        type: array
      choicetype:
        type: integer
      code:
        type: string
      guidfixed:
        type: string
      maxselect:
        type: integer
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      order:
        type: integer
      required:
        type: boolean
    type: object
  models.InventoryOptionPageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.InventoryOptionMainInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.InventoryOptonGroupDetail:
    properties:
      amount:
        type: number
      detailname1:
        type: string
      guidfixed:
        type: string
    type: object
  models.InventoryPageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.InventoryInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.InventoryTag:
    properties:
      name:
        type: string
    type: object
  models.Member:
    properties:
      address:
        type: string
      branchcode:
        type: string
      branchtype:
        type: integer
      contacttype:
        type: integer
      name:
        type: string
      personaltype:
        type: integer
      surname:
        type: string
      taxid:
        type: string
      telephone:
        type: string
      zipcode:
        type: string
    type: object
  models.MemberActivity:
    properties:
      address:
        type: string
      branchcode:
        type: string
      branchtype:
        type: integer
      contacttype:
        type: integer
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      name:
        type: string
      personaltype:
        type: integer
      shopid:
        type: string
      surname:
        type: string
      taxid:
        type: string
      telephone:
        type: string
      updatedat:
        type: string
      zipcode:
        type: string
    type: object
  models.MemberDeleteActivity:
    properties:
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      shopid:
        type: string
      updatedat:
        type: string
    type: object
  models.MemberFetchUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/models.MemberLastActivityResponse'
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.MemberInfo:
    properties:
      address:
        type: string
      branchcode:
        type: string
      branchtype:
        type: integer
      contacttype:
        type: integer
      guidfixed:
        type: string
      name:
        type: string
      personaltype:
        type: integer
      surname:
        type: string
      taxid:
        type: string
      telephone:
        type: string
      zipcode:
        type: string
    type: object
  models.MemberInfoResponse:
    properties:
      data:
        $ref: '#/definitions/models.MemberInfo'
      success:
        type: boolean
    type: object
  models.MemberLastActivityResponse:
    properties:
      new:
        items:
          $ref: '#/definitions/models.MemberActivity'
        type: array
      remove:
        items:
          $ref: '#/definitions/models.MemberDeleteActivity'
        type: array
    type: object
  models.MemberPageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MemberInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.Option:
    properties:
      choices:
        items:
          $ref: '#/definitions/models.Choice'
        type: array
      choicetype:
        type: integer
      code:
        type: string
      maxselect:
        type: integer
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      order:
        type: integer
      required:
        type: boolean
    type: object
  models.PaginationDataResponse:
    properties:
      next:
        type: integer
      page:
        type: integer
      perPage:
        type: integer
      prev:
        type: integer
      total:
        type: integer
      totalPage:
        type: integer
    type: object
  models.Payment:
    properties:
      cash:
        type: number
      creditcard:
        type: number
      creditcarddetails:
        items:
          $ref: '#/definitions/models.CreditCardPayment'
        type: array
      transfer:
        type: number
      transferdetails:
        items:
          $ref: '#/definitions/models.TransferPayment'
        type: array
    type: object
  models.Purchase:
    properties:
      discountamount:
        type: number
      docdate:
        type: string
      docno:
        type: string
      items:
        items:
          $ref: '#/definitions/models.PurchaseDetail'
        type: array
      member:
        $ref: '#/definitions/models.Member'
      payment:
        $ref: '#/definitions/models.Payment'
      sumamount:
        type: number
      taxamount:
        type: number
      taxbaseamount:
        type: number
      taxrate:
        type: number
      totalamount:
        type: number
    type: object
  models.PurchaseDetail:
    properties:
      activated:
        description: เปิดใช้งานอยู่
        type: boolean
      amount:
        type: number
      barcode:
        type: string
      category:
        $ref: '#/definitions/models.Category'
      categoryguid:
        description: Guid กลุ่มสินค้า
        type: string
      description1:
        description: รายละเอียดภาษาไทย
        type: string
      description2:
        type: string
      description3:
        type: string
      description4:
        type: string
      description5:
        type: string
      discountamount:
        type: number
      discounttext:
        type: string
      guidfixed:
        type: string
      images:
        items:
          $ref: '#/definitions/models.InventoryImage'
        type: array
      itemcode:
        type: string
      itemguid:
        type: string
      itemsku:
        type: string
      itemunitcode:
        type: string
      itemunitdiv:
        type: number
      itemunitstd:
        type: number
      linenumber:
        type: integer
      memberprice:
        type: number
      name1:
        description: ชื่อภาษาไทย
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      parid:
        type: string
      price:
        type: number
      qty:
        type: number
      recommended:
        description: สินค้าแนะนำ
        type: boolean
      tags:
        items:
          $ref: '#/definitions/models.InventoryTag'
        type: array
      unitname1:
        type: string
      unitname2:
        type: string
      unitname3:
        type: string
      unitname4:
        type: string
      unitname5:
        type: string
    type: object
  models.PurchaseInfo:
    properties:
      discountamount:
        type: number
      docdate:
        type: string
      docno:
        type: string
      guidfixed:
        type: string
      items:
        items:
          $ref: '#/definitions/models.PurchaseDetail'
        type: array
      member:
        $ref: '#/definitions/models.Member'
      payment:
        $ref: '#/definitions/models.Payment'
      sumamount:
        type: number
      taxamount:
        type: number
      taxbaseamount:
        type: number
      taxrate:
        type: number
      totalamount:
        type: number
    type: object
  models.PurchaseListPageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.PurchaseInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.ResponseSuccess:
    properties:
      success:
        type: boolean
    type: object
  models.ResponseSuccessWithID:
    properties:
      id: {}
      success:
        type: boolean
    type: object
  models.SaleInvoiceListPageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.SaleinvoiceInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  models.Saleinvoice:
    properties:
      discountamount:
        type: number
      docdate:
        format: date-time
        type: string
      docno:
        type: string
      items:
        items:
          $ref: '#/definitions/models.SaleinvoiceDetail'
        type: array
      localdate:
        type: string
      localtime:
        type: string
      member:
        $ref: '#/definitions/models.Member'
      payment:
        $ref: '#/definitions/models.Payment'
      sumamount:
        type: number
      taxamount:
        type: number
      taxbaseamount:
        type: number
      taxrate:
        type: number
      totalamount:
        type: number
    type: object
  models.SaleinvoiceDetail:
    properties:
      activated:
        description: เปิดใช้งานอยู่
        type: boolean
      amount:
        type: number
      barcode:
        type: string
      category:
        $ref: '#/definitions/models.Category'
      categoryguid:
        description: Guid กลุ่มสินค้า
        type: string
      description1:
        description: รายละเอียดภาษาไทย
        type: string
      description2:
        type: string
      description3:
        type: string
      description4:
        type: string
      description5:
        type: string
      discountamount:
        type: number
      discounttext:
        type: string
      guidfixed:
        type: string
      images:
        items:
          $ref: '#/definitions/models.InventoryImage'
        type: array
      itemcode:
        type: string
      itemguid:
        type: string
      itemsku:
        type: string
      itemunitcode:
        type: string
      itemunitdiv:
        type: number
      itemunitstd:
        type: number
      linenumber:
        type: integer
      memberprice:
        type: number
      name1:
        description: ชื่อภาษาไทย
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      parid:
        type: string
      price:
        type: number
      qty:
        type: number
      recommended:
        description: สินค้าแนะนำ
        type: boolean
      tags:
        items:
          $ref: '#/definitions/models.InventoryTag'
        type: array
      unitname1:
        type: string
      unitname2:
        type: string
      unitname3:
        type: string
      unitname4:
        type: string
      unitname5:
        type: string
    type: object
  models.SaleinvoiceInfo:
    properties:
      discountamount:
        type: number
      docdate:
        format: date-time
        type: string
      docno:
        type: string
      guidfixed:
        type: string
      items:
        items:
          $ref: '#/definitions/models.SaleinvoiceDetail'
        type: array
      localdate:
        type: string
      localtime:
        type: string
      member:
        $ref: '#/definitions/models.Member'
      payment:
        $ref: '#/definitions/models.Payment'
      sumamount:
        type: number
      taxamount:
        type: number
      taxbaseamount:
        type: number
      taxrate:
        type: number
      totalamount:
        type: number
    type: object
  models.Shop:
    properties:
      name1:
        type: string
      telephone:
        type: string
    type: object
  models.ShopInfo:
    properties:
      guidfixed:
        type: string
      name1:
        type: string
      telephone:
        type: string
    type: object
  models.ShopSelectRequest:
    properties:
      shopid:
        type: string
    type: object
  models.ShopUserInfo:
    properties:
      name:
        type: string
      role:
        type: string
      shopid:
        type: string
    type: object
  models.SyncInventoryData:
    properties:
      data:
        $ref: '#/definitions/models.Inventory'
      mode:
        type: integer
      myguid:
        type: string
      tablecode:
        type: string
    type: object
  models.TransferPayment:
    properties:
      amount:
        type: number
      bankcode:
        type: string
    type: object
  models.UserProfile:
    properties:
      name:
        type: string
      username:
        type: string
    type: object
  models.UserProfileReponse:
    properties:
      data:
        $ref: '#/definitions/models.UserProfile'
      success:
        type: boolean
    type: object
  models.UserRequest:
    properties:
      name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  restaurant.Kitchen:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      code:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      printers:
        items:
          $ref: '#/definitions/restaurant.PrinterTerminal'
        type: array
      products:
        items:
          $ref: '#/definitions/models.Inventory'
        type: array
      zones:
        items:
          $ref: '#/definitions/restaurant.ShopZone'
        type: array
    type: object
  restaurant.KitchenActivity:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      code:
        type: string
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      printers:
        items:
          $ref: '#/definitions/restaurant.PrinterTerminal'
        type: array
      products:
        items:
          $ref: '#/definitions/models.Inventory'
        type: array
      shopid:
        type: string
      updatedat:
        type: string
      zones:
        items:
          $ref: '#/definitions/restaurant.ShopZone'
        type: array
    type: object
  restaurant.KitchenDeleteActivity:
    properties:
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      shopid:
        type: string
      updatedat:
        type: string
    type: object
  restaurant.KitchenFetchUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/restaurant.KitchenLastActivityResponse'
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  restaurant.KitchenInfo:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      code:
        type: string
      guidfixed:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      printers:
        items:
          $ref: '#/definitions/restaurant.PrinterTerminal'
        type: array
      products:
        items:
          $ref: '#/definitions/models.Inventory'
        type: array
      zones:
        items:
          $ref: '#/definitions/restaurant.ShopZone'
        type: array
    type: object
  restaurant.KitchenInfoResponse:
    properties:
      data:
        $ref: '#/definitions/restaurant.KitchenInfo'
      success:
        type: boolean
    type: object
  restaurant.KitchenLastActivityResponse:
    properties:
      new:
        items:
          $ref: '#/definitions/restaurant.KitchenActivity'
        type: array
      remove:
        items:
          $ref: '#/definitions/restaurant.KitchenDeleteActivity'
        type: array
    type: object
  restaurant.KitchenPageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/restaurant.KitchenInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  restaurant.PrinterTerminal:
    properties:
      address:
        type: string
      code:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      type:
        type: integer
    type: object
  restaurant.PrinterTerminalActivity:
    properties:
      address:
        type: string
      code:
        type: string
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      shopid:
        type: string
      type:
        type: integer
      updatedat:
        type: string
    type: object
  restaurant.PrinterTerminalDeleteActivity:
    properties:
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      shopid:
        type: string
      updatedat:
        type: string
    type: object
  restaurant.PrinterTerminalFetchUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/restaurant.PrinterTerminalLastActivityResponse'
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  restaurant.PrinterTerminalInfo:
    properties:
      address:
        type: string
      code:
        type: string
      guidfixed:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      type:
        type: integer
    type: object
  restaurant.PrinterTerminalInfoResponse:
    properties:
      data:
        $ref: '#/definitions/restaurant.PrinterTerminalInfo'
      success:
        type: boolean
    type: object
  restaurant.PrinterTerminalLastActivityResponse:
    properties:
      new:
        items:
          $ref: '#/definitions/restaurant.PrinterTerminalActivity'
        type: array
      remove:
        items:
          $ref: '#/definitions/restaurant.PrinterTerminalDeleteActivity'
        type: array
    type: object
  restaurant.PrinterTerminalPageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/restaurant.PrinterTerminalInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  restaurant.ShopTable:
    properties:
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      number:
        type: string
      seat:
        type: integer
      zone:
        $ref: '#/definitions/restaurant.ShopZone'
    type: object
  restaurant.ShopTableActivity:
    properties:
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      number:
        type: string
      seat:
        type: integer
      shopid:
        type: string
      updatedat:
        type: string
      zone:
        $ref: '#/definitions/restaurant.ShopZone'
    type: object
  restaurant.ShopTableDeleteActivity:
    properties:
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      shopid:
        type: string
      updatedat:
        type: string
    type: object
  restaurant.ShopTableFetchUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/restaurant.ShopTableLastActivityResponse'
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  restaurant.ShopTableInfo:
    properties:
      guidfixed:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      number:
        type: string
      seat:
        type: integer
      zone:
        $ref: '#/definitions/restaurant.ShopZone'
    type: object
  restaurant.ShopTableInfoResponse:
    properties:
      data:
        $ref: '#/definitions/restaurant.ShopTableInfo'
      success:
        type: boolean
    type: object
  restaurant.ShopTableLastActivityResponse:
    properties:
      new:
        items:
          $ref: '#/definitions/restaurant.ShopTableActivity'
        type: array
      remove:
        items:
          $ref: '#/definitions/restaurant.ShopTableDeleteActivity'
        type: array
    type: object
  restaurant.ShopTablePageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/restaurant.ShopTableInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  restaurant.ShopZone:
    properties:
      code:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      printer:
        $ref: '#/definitions/restaurant.PrinterTerminal'
    type: object
  restaurant.ShopZoneActivity:
    properties:
      code:
        type: string
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      printer:
        $ref: '#/definitions/restaurant.PrinterTerminal'
      shopid:
        type: string
      updatedat:
        type: string
    type: object
  restaurant.ShopZoneDeleteActivity:
    properties:
      createdat:
        type: string
      deletedat:
        type: string
      guidfixed:
        type: string
      shopid:
        type: string
      updatedat:
        type: string
    type: object
  restaurant.ShopZoneFetchUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/restaurant.ShopZoneLastActivityResponse'
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
  restaurant.ShopZoneInfo:
    properties:
      code:
        type: string
      guidfixed:
        type: string
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      printer:
        $ref: '#/definitions/restaurant.PrinterTerminal'
    type: object
  restaurant.ShopZoneInfoResponse:
    properties:
      data:
        $ref: '#/definitions/restaurant.ShopZoneInfo'
      success:
        type: boolean
    type: object
  restaurant.ShopZoneLastActivityResponse:
    properties:
      new:
        items:
          $ref: '#/definitions/restaurant.ShopZoneActivity'
        type: array
      remove:
        items:
          $ref: '#/definitions/restaurant.ShopZoneDeleteActivity'
        type: array
    type: object
  restaurant.ShopZonePageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/restaurant.ShopZoneInfo'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationDataResponse'
      success:
        type: boolean
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: SML Cloud Platform API
  version: "1.0"
paths:
  /category:
    get:
      consumes:
      - application/json
      description: List Inventory Category
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Add Category
        in: query
        name: page
        type: integer
      - description: Add Category
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CategoryPageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    post:
      consumes:
      - application/json
      description: Create Inventory Category
      parameters:
      - description: Add Category
        in: body
        name: Category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    get:
      consumes:
      - application/json
      description: Get Inventory Category
      parameters:
      - description: Category Id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CategoryInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    put:
      consumes:
      - application/json
      description: Update Inventory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category
        in: body
        name: Category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /category/bulk:
    post:
      consumes:
      - application/json
      description: Create Category
      parameters:
      - description: Category
        in: body
        name: Category
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Category'
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CategoryBulkReponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /category/fetchupdate:
    get:
      consumes:
      - application/json
      description: Fetch Update Category By Date
      parameters:
      - description: DateTime
        in: query
        name: lastUpdate
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CategoryFetchUpdateResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /employee:
    get:
      consumes:
      - application/json
      description: List Employee
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EmployeePageResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Employee
    post:
      consumes:
      - application/json
      description: For Create Employee
      parameters:
      - description: Register Employee
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      summary: Create Employee
      tags:
      - Employee
  /employee/{id}:
    put:
      consumes:
      - application/json
      description: Update Employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee
        in: body
        name: Employee
        required: true
        schema:
          $ref: '#/definitions/models.EmployeeRequestUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      summary: Update Employee
      tags:
      - Employee
  /employee/password/{id}:
    put:
      consumes:
      - application/json
      description: For User Register Application
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Register Employee
        in: body
        name: Employee
        required: true
        schema:
          $ref: '#/definitions/models.EmployeeRequestPassword'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      summary: Register An Account
      tags:
      - Employee
  /employee/whois:
    post:
      consumes:
      - application/json
      description: Validate Employee
      parameters:
      - description: EmployeeUserPassword
        in: body
        name: EmployeeUserPassword
        required: true
        schema:
          $ref: '#/definitions/models.EmployeeRequestLogin'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.EmployeeInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Employee
  /import/category:
    delete:
      consumes:
      - application/json
      description: Delete Category
      parameters:
      - description: Category Import ID
        in: body
        name: id
        required: true
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Import
    get:
      consumes:
      - application/json
      description: get struct array by ID
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CategoryImportPageResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Import
    post:
      consumes:
      - application/json
      description: Create Catagory Import
      parameters:
      - description: Catagory
        in: body
        name: Catagory
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CategoryImport'
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Import
  /import/inventory:
    delete:
      consumes:
      - application/json
      description: Delete Inventory
      parameters:
      - description: Inventory Import ID
        in: body
        name: id
        required: true
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Import
    get:
      consumes:
      - application/json
      description: get struct array by ID
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InventoryPageResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Import
    post:
      consumes:
      - application/json
      description: Create Inventory Import
      parameters:
      - description: Inventory
        in: body
        name: Inventory
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Inventory'
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Import
  /import/option:
    delete:
      consumes:
      - application/json
      description: Delete Option
      parameters:
      - description: Option ID
        in: body
        name: id
        required: true
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Import
    get:
      consumes:
      - application/json
      description: List Inventory Option
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InventoryOptionPageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Import
    post:
      consumes:
      - application/json
      description: Create Inventory Option
      parameters:
      - description: Option
        in: body
        name: Option
        required: true
        schema:
          items:
            $ref: '#/definitions/models.InventoryOptionMainImport'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Import
  /inventory:
    get:
      consumes:
      - application/json
      description: get struct array by ID
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Add Category
        in: query
        name: page
        type: integer
      - description: Add Category
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InventoryPageResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    post:
      consumes:
      - application/json
      description: Create Inventory
      parameters:
      - description: Inventory
        in: body
        name: Inventory
        required: true
        schema:
          $ref: '#/definitions/models.Inventory'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /inventory/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Inventory
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    get:
      consumes:
      - application/json
      description: get struct array by ID
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InventoryInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    put:
      consumes:
      - application/json
      description: Update Inventory
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      - description: Inventory
        in: body
        name: Inventory
        required: true
        schema:
          $ref: '#/definitions/models.Inventory'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /inventory/bulk:
    post:
      consumes:
      - application/json
      description: Create Inventory
      parameters:
      - description: Inventory
        in: body
        name: Inventory
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Inventory'
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.InventoryBulkInsertResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /inventory/categoryupdate/{catid}:
    post:
      consumes:
      - application/json
      description: Update Inventory Category List
      parameters:
      - description: Category GUID
        in: path
        name: catid
        required: true
        type: string
      - description: Inventory
        in: body
        name: Inventory
        required: true
        schema:
          items:
            type: string
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /inventory/fetchupdate:
    get:
      consumes:
      - application/json
      description: Fetch Update Inventory By Date
      parameters:
      - description: DateTime YYYY-MM-DDTHH:mm
        in: query
        name: lastUpdate
        required: true
        type: string
      - description: Add Category
        in: query
        name: page
        type: integer
      - description: Add Category
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InventoryFetchUpdateResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /list-shop:
    get:
      consumes:
      - application/json
      description: List Merchant In My Account
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ShopUserInfo'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - AccessToken: []
      tags:
      - Authentication
  /login:
    post:
      consumes:
      - application/json
      description: get struct array by ID
      parameters:
      - description: User Account
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      tags:
      - Authentication
  /member:
    get:
      consumes:
      - application/json
      description: List Member Category
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberPageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Member
    post:
      consumes:
      - application/json
      description: Create Member
      parameters:
      - description: Member
        in: body
        name: Member
        required: true
        schema:
          $ref: '#/definitions/models.Member'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Member
  /member/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Member
      parameters:
      - description: Member ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Member
    get:
      consumes:
      - application/json
      description: Get Member
      parameters:
      - description: Member Id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Member
    put:
      consumes:
      - application/json
      description: Update Member
      parameters:
      - description: Member ID
        in: path
        name: id
        required: true
        type: string
      - description: Member
        in: body
        name: Member
        required: true
        schema:
          $ref: '#/definitions/models.Member'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Member
  /member/fetchupdate:
    get:
      consumes:
      - application/json
      description: Fetch Update Member By Date
      parameters:
      - description: DateTime
        in: query
        name: lastUpdate
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberFetchUpdateResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Member
  /merchant:
    get:
      consumes:
      - application/json
      description: Access to Merchant
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ShopInfo'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - AccessToken: []
      tags:
      - Merchant
  /optgroup:
    get:
      consumes:
      - application/json
      description: List Inventory Option Group
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    post:
      consumes:
      - application/json
      description: Create Inventory Option Group
      parameters:
      - description: Option Group
        in: body
        name: Option
        required: true
        schema:
          $ref: '#/definitions/models.InventoryOptionGroup'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /optgroup/{id}:
    delete:
      consumes:
      - application/json
      description: Delete OptionGroup
      parameters:
      - description: OptionGroup ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    get:
      consumes:
      - application/json
      description: Get Option Group Information
      parameters:
      - description: OptionGroup Id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    put:
      consumes:
      - application/json
      description: Update Option Group
      parameters:
      - description: Option ID
        in: path
        name: id
        required: true
        type: string
      - description: Option Group
        in: body
        name: OptionGroup
        required: true
        schema:
          $ref: '#/definitions/models.InventoryOptionGroup'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /option:
    get:
      consumes:
      - application/json
      description: List Inventory Option
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Add Category
        in: query
        name: page
        type: integer
      - description: Add Category
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InventoryOptionPageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    post:
      consumes:
      - application/json
      description: Create Inventory Option
      parameters:
      - description: Option
        in: body
        name: Option
        required: true
        schema:
          $ref: '#/definitions/models.InventoryOptionMain'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /option/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Option
      parameters:
      - description: Option ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    get:
      consumes:
      - application/json
      description: Get Inventory Option
      parameters:
      - description: Option Id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InventoryOptionMainInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
    put:
      consumes:
      - application/json
      description: Update Option
      parameters:
      - description: Option ID
        in: path
        name: id
        required: true
        type: string
      - description: Option
        in: body
        name: Option
        required: true
        schema:
          $ref: '#/definitions/models.InventoryOptionMain'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Inventory
  /profile:
    get:
      consumes:
      - application/json
      description: Get Current Profile
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserProfileReponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Authentication
  /purchase:
    get:
      consumes:
      - application/json
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Add Category
        in: query
        name: page
        type: integer
      - description: Add Category
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PurchaseListPageResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Purchase
    post:
      consumes:
      - application/json
      description: Create Purchase Transaction
      parameters:
      - description: payload
        in: body
        name: Purchase
        required: true
        schema:
          $ref: '#/definitions/models.Purchase'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Purchase
  /purchase/{id}:
    delete:
      consumes:
      - application/json
      description: Tempolaty Delete  Purchase Transaction
      parameters:
      - description: Purchase Doc ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Purchase
    get:
      consumes:
      - application/json
      description: After Purchare Doc Create system will be return Id of Purchase
        Document. this Id can get Purchase Document in this service.
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PurchaseInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Purchase
    put:
      consumes:
      - application/json
      description: Update Inventory
      parameters:
      - description: Purchase Document ID
        in: path
        name: id
        required: true
        type: string
      - description: payload
        in: body
        name: Purchase
        required: true
        schema:
          $ref: '#/definitions/models.Purchase'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Purchase
  /register:
    post:
      consumes:
      - application/json
      description: For User Register Application
      parameters:
      - description: Register account
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      summary: Register An Account
      tags:
      - Authentication
  /restaurant/kitchen:
    get:
      consumes:
      - application/json
      description: List Restaurant Kitchen Category
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.KitchenPageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    post:
      consumes:
      - application/json
      description: Restaurant Kitchen
      parameters:
      - description: Kitchen
        in: body
        name: Kitchen
        required: true
        schema:
          $ref: '#/definitions/restaurant.Kitchen'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/kitchen/{id}:
    delete:
      consumes:
      - application/json
      description: Restaurant Kitchen
      parameters:
      - description: Kitchen ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    get:
      consumes:
      - application/json
      description: Get Restaurant Kitchen
      parameters:
      - description: Kitchen Id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.KitchenInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    put:
      consumes:
      - application/json
      description: Restaurant Kitchen
      parameters:
      - description: Kitchen ID
        in: path
        name: id
        required: true
        type: string
      - description: Kitchen
        in: body
        name: Kitchen
        required: true
        schema:
          $ref: '#/definitions/restaurant.Kitchen'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/kitchen/bulk:
    post:
      consumes:
      - application/json
      description: Create Kitchen
      parameters:
      - description: Kitchen
        in: body
        name: Kitchen
        required: true
        schema:
          items:
            $ref: '#/definitions/restaurant.Kitchen'
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BulkInsertResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/kitchen/fetchupdate:
    get:
      consumes:
      - application/json
      description: Fetch Restaurant Kitchen Update By Date
      parameters:
      - description: DateTime YYYY-MM-DDTHH:mm
        in: query
        name: lastUpdate
        required: true
        type: string
      - description: Add Category
        in: query
        name: page
        type: integer
      - description: Add Category
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.KitchenFetchUpdateResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/printer:
    get:
      consumes:
      - application/json
      description: List Restaurant Printer Category
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.PrinterTerminalPageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    post:
      consumes:
      - application/json
      description: Restaurant Printer
      parameters:
      - description: Printer
        in: body
        name: Printer
        required: true
        schema:
          $ref: '#/definitions/restaurant.PrinterTerminal'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/printer/{id}:
    delete:
      consumes:
      - application/json
      description: Restaurant Printer
      parameters:
      - description: Printer ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    get:
      consumes:
      - application/json
      description: Get Restaurant Printer
      parameters:
      - description: Printer Id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.PrinterTerminalInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    put:
      consumes:
      - application/json
      description: Restaurant Printer
      parameters:
      - description: Printer ID
        in: path
        name: id
        required: true
        type: string
      - description: Printer
        in: body
        name: Printer
        required: true
        schema:
          $ref: '#/definitions/restaurant.PrinterTerminal'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/printer/bulk:
    post:
      consumes:
      - application/json
      description: Printer ShopZone
      parameters:
      - description: Printer
        in: body
        name: Printer
        required: true
        schema:
          items:
            $ref: '#/definitions/restaurant.PrinterTerminal'
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BulkInsertResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/printer/fetchupdate:
    get:
      consumes:
      - application/json
      description: Fetch Restaurant Printer Update By Date
      parameters:
      - description: DateTime YYYY-MM-DDTHH:mm
        in: query
        name: lastUpdate
        required: true
        type: string
      - description: Add Category
        in: query
        name: page
        type: integer
      - description: Add Category
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.PrinterTerminalFetchUpdateResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/table:
    get:
      consumes:
      - application/json
      description: List Restaurant Shop Table Category
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.ShopTablePageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    post:
      consumes:
      - application/json
      description: Restaurant Shop Table
      parameters:
      - description: Table
        in: body
        name: Table
        required: true
        schema:
          $ref: '#/definitions/restaurant.ShopTable'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/table/{id}:
    delete:
      consumes:
      - application/json
      description: Restaurant Shop Table
      parameters:
      - description: ShopTable ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    get:
      consumes:
      - application/json
      description: Get Restaurant Shop Table
      parameters:
      - description: ShopTable Id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.ShopTableInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    put:
      consumes:
      - application/json
      description: Restaurant Shop Table
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: string
      - description: Table
        in: body
        name: Table
        required: true
        schema:
          $ref: '#/definitions/restaurant.ShopTable'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/table/bulk:
    post:
      consumes:
      - application/json
      description: Create ShopTable
      parameters:
      - description: ShopTable
        in: body
        name: ShopTable
        required: true
        schema:
          items:
            $ref: '#/definitions/restaurant.ShopTable'
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BulkInsertResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/table/fetchupdate:
    get:
      consumes:
      - application/json
      description: Fetch Restaurant ShopTable Update By Date
      parameters:
      - description: DateTime YYYY-MM-DDTHH:mm
        in: query
        name: lastUpdate
        required: true
        type: string
      - description: Add Category
        in: query
        name: page
        type: integer
      - description: Add Category
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.ShopTableFetchUpdateResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/zone:
    get:
      consumes:
      - application/json
      description: List Restaurant Shop Zone Category
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.ShopZonePageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    post:
      consumes:
      - application/json
      description: Restaurant Shop Zone
      parameters:
      - description: Zone
        in: body
        name: Zone
        required: true
        schema:
          $ref: '#/definitions/restaurant.ShopZone'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/zone/{id}:
    delete:
      consumes:
      - application/json
      description: Restaurant Shop Zone
      parameters:
      - description: ShopZone ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    get:
      consumes:
      - application/json
      description: Get Restaurant Shop Zone
      parameters:
      - description: ShopZone Id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.ShopZoneInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
    put:
      consumes:
      - application/json
      description: Restaurant Shop Zone
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: string
      - description: Zone
        in: body
        name: Zone
        required: true
        schema:
          $ref: '#/definitions/restaurant.ShopZone'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/zone/bulk:
    post:
      consumes:
      - application/json
      description: Create ShopZone
      parameters:
      - description: ShopZone
        in: body
        name: ShopZone
        required: true
        schema:
          items:
            $ref: '#/definitions/restaurant.ShopZone'
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BulkInsertResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /restaurant/zone/fetchupdate:
    get:
      consumes:
      - application/json
      description: Fetch Restaurant ShopZone Update By Date
      parameters:
      - description: DateTime YYYY-MM-DDTHH:mm
        in: query
        name: lastUpdate
        required: true
        type: string
      - description: Add Category
        in: query
        name: page
        type: integer
      - description: Add Category
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurant.ShopZoneFetchUpdateResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Restaurant
  /saleinvoice:
    get:
      consumes:
      - application/json
      description: List Sale Invoice Document
      parameters:
      - description: Search Value
        in: query
        name: q
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SaleInvoiceListPageResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Sale Invoice
    post:
      consumes:
      - application/json
      description: Create Inventory
      parameters:
      - description: SaleInvoice
        in: body
        name: SaleInvoice
        required: true
        schema:
          $ref: '#/definitions/models.Saleinvoice'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Sale Invoice
  /saleinvoice/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Document
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Sale Invoice
    get:
      consumes:
      - application/json
      description: get struct array by ID
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SaleinvoiceInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Sale Invoice
    put:
      consumes:
      - application/json
      description: Update Sale Invoice
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Invoice
        required: true
        schema:
          $ref: '#/definitions/models.Saleinvoice'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccessWithID'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Sale Invoice
  /select-shop:
    post:
      consumes:
      - application/json
      description: Access to Shop
      parameters:
      - description: Shop
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.ShopSelectRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - AccessToken: []
      tags:
      - Authentication
  /shop:
    get:
      consumes:
      - application/json
      description: Access to Shop
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ShopInfo'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - AccessToken: []
      tags:
      - Shop
    post:
      consumes:
      - application/json
      description: Create Shop
      parameters:
      - description: Add Shop
        in: body
        name: Shop
        required: true
        schema:
          $ref: '#/definitions/models.Shop'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Shop'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Shop
  /syncproduct:
    post:
      consumes:
      - application/json
      description: get struct array by ID
      parameters:
      - description: Data Payload
        in: body
        name: Data
        required: true
        schema:
          $ref: '#/definitions/models.SyncInventoryData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Synchronize
  /upload/images:
    post:
      consumes:
      - application/json
      description: Update Image
      parameters:
      - description: Image
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Image'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Common
  /upload/productimage:
    post:
      consumes:
      - application/json
      description: Update Image
      parameters:
      - description: Image
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Image'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AuthResponseFailed'
      security:
      - AccessToken: []
      tags:
      - Common
schemes:
- http
- https
securityDefinitions:
  AccessToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
